{
  "api/SharpManager.Arduino.html": {
    "href": "api/SharpManager.Arduino.html",
    "title": "Class Arduino | Sharp Manager",
    "keywords": "Class Arduino Namespace SharpManager Assembly SharpManager.Common.dll public class Arduino : NotifyObject, INotifyPropertyChanged, IDisposable Inheritance object NotifyObject Arduino Implements INotifyPropertyChanged IDisposable Inherited Members NotifyObject.PropertyChanged NotifyObject.GetProperty<T>(string) NotifyObject.GetProperty<T>(T, string) NotifyObject.SetProperty<T>(T, string) NotifyObject.SetProperty<T>(T, Action, string) NotifyObject.SetProperty<T>(ref T, T, string) NotifyObject.OnPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Arduino(IDebugTarget, string?) Initializes a new instance of the Arduino class. public Arduino(IDebugTarget messageTarget, string? diskDirectory) Parameters messageTarget IDebugTarget The message log. diskDirectory string The disk directory. Properties CanCancel Gets a value indicating whether this instance can cancel. public bool CanCancel { get; } Property Value bool DiskDirectory Gets or sets the disk directory. public string? DiskDirectory { get; set; } Property Value string IsConnected Gets a value indicating whether this instance is connected. public bool IsConnected { get; } Property Value bool Methods Cancel() Cancels the current operation public void Cancel() Connect(string) Connects the specified port name. public Task Connect(string portName) Parameters portName string Name of the port. Returns Task Disconnect() Disconnects this instance. public void Disconnect() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Ping() Pings the arduino public Task Ping() Returns Task Exceptions InvalidOperationException Cannot test if not connected ReadTapeFile() Reads the tape file. public Task<byte[]> ReadTapeFile() Returns Task<byte[]> SendTapeFile(Stream) Sends the tape file. public Task SendTapeFile(Stream fileStream) Parameters fileStream Stream The file stream. Returns Task Exceptions InvalidOperationException Cannot send file if not connected Exception Unable to start file transfer"
  },
  "api/SharpManager.ArduinoException.html": {
    "href": "api/SharpManager.ArduinoException.html",
    "title": "Class ArduinoException | Sharp Manager",
    "keywords": "Class ArduinoException Namespace SharpManager Assembly SharpManager.Common.dll public class ArduinoException : Exception, ISerializable Inheritance object Exception ArduinoException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ArduinoException() Initializes a new instance of the ArduinoException class. public ArduinoException() ArduinoException(ErrorCode) Initializes a new instance of the ArduinoException class. public ArduinoException(ErrorCode errorCode) Parameters errorCode ErrorCode The error code. ArduinoException(byte) Initializes a new instance of the ArduinoException class. public ArduinoException(byte errorCode) Parameters errorCode byte The error code as byte. ArduinoException(string) Initializes a new instance of the ArduinoException class. public ArduinoException(string message) Parameters message string The message that describes the error. ArduinoException(string, DataException) Initializes a new instance of the ArduinoException class. public ArduinoException(string message, DataException innerException) Parameters message string The error message that explains the reason for the exception. innerException DataException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties ErrorCode public ErrorCode ErrorCode { get; } Property Value ErrorCode Methods Timeout() Throws timeout exception public static void Timeout() Exceptions ArduinoException"
  },
  "api/SharpManager.ArduinoHardware.html": {
    "href": "api/SharpManager.ArduinoHardware.html",
    "title": "Class ArduinoHardware | Sharp Manager",
    "keywords": "Class ArduinoHardware Namespace SharpManager Assembly SharpManager.Common.dll public class ArduinoHardware Inheritance object ArduinoHardware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Models Gets the supported hardware models. public static IEnumerable<ArduinoHardware> Models { get; } Property Value IEnumerable<ArduinoHardware> Name Gets the name. public string Name { get; } Property Value string Methods UploadFirmware(string, IDebugTarget, IProgress<double>) Uploads the firmware for this hardware model public Task UploadFirmware(string port, IDebugTarget debugTarget, IProgress<double> progress) Parameters port string The port. debugTarget IDebugTarget The debug target. progress IProgress<double> The progress. Returns Task"
  },
  "api/SharpManager.ByteListExtensions.html": {
    "href": "api/SharpManager.ByteListExtensions.html",
    "title": "Class ByteListExtensions | Sharp Manager",
    "keywords": "Class ByteListExtensions Namespace SharpManager Assembly SharpManager.Common.dll public static class ByteListExtensions Inheritance object ByteListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(List<byte>, int) Adds the integer to the list as a byte public static void Add(this List<byte> list, int value) Parameters list List<byte> The list. value int The value. AddBlock(List<byte>, IEnumerable<byte>) Adds a block of data public static void AddBlock(this List<byte> data, IEnumerable<byte> block) Parameters data List<byte> The data. block IEnumerable<byte> The block. AddChecksum(List<byte>, IEnumerable<byte>?) Adds the checksum. public static void AddChecksum(this List<byte> data, IEnumerable<byte>? values = null) Parameters data List<byte> The data. values IEnumerable<byte> The values. AddFrame(List<byte>) Adds the frame. public static void AddFrame(this List<byte> data) Parameters data List<byte> The data. AddSize(List<byte>, int) Adds a size to the byte array. Sizes are 3 bytes long. public static void AddSize(this List<byte> data, int size) Parameters data List<byte> The data. size int The size. AddString(List<byte>, string) Adds the string toe the byte list public static void AddString(this List<byte> data, string value) Parameters data List<byte> The data. value string The value. ToFrame(List<byte>) Adds the frame. public static byte[] ToFrame(this List<byte> data) Parameters data List<byte> The data. Returns byte[]"
  },
  "api/SharpManager.ByteStreamExtensions.html": {
    "href": "api/SharpManager.ByteStreamExtensions.html",
    "title": "Class ByteStreamExtensions | Sharp Manager",
    "keywords": "Class ByteStreamExtensions Namespace SharpManager Assembly SharpManager.Common.dll public static class ByteStreamExtensions Inheritance object ByteStreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExpectByteAsync(IReadByteStream, byte) Expects the byte and throws DataException if doesn't match public static Task ExpectByteAsync(this IReadByteStream stream, byte expected) Parameters stream IReadByteStream The stream. expected byte The expected. Returns Task ExpectByteAsync(IReadByteStream, byte, int) Expects the byte and throws DataException if doesn't match or ArduinoException if timeout public static Task ExpectByteAsync(this IReadByteStream stream, byte expected, int millisecondsTimeout) Parameters stream IReadByteStream The stream. expected byte The expected. millisecondsTimeout int The milliseconds timeout. Returns Task ExpectByteAsync(IReadByteStream, byte, int, string) Expects the byte and throws DataException if doesn't match or ArduinoException if timeout public static Task ExpectByteAsync(this IReadByteStream stream, byte expected, int millisecondsTimeout, string errorMessage) Parameters stream IReadByteStream The stream. expected byte The expected. millisecondsTimeout int The milliseconds timeout. errorMessage string The error message. Returns Task ExpectByteAsync(IReadByteStream, byte, string) Expects the byte and throws DataException if doesn't match public static Task ExpectByteAsync(this IReadByteStream stream, byte expected, string errorMessage) Parameters stream IReadByteStream The stream. expected byte The expected. errorMessage string The error message. Returns Task ReadByte(IReadByteStream) Reads the byte. public static byte ReadByte(this IReadByteStream stream) Parameters stream IReadByteStream The stream. Returns byte ReadByte(IReadByteStream, int, CancellationToken) Reads the byte. public static byte ReadByte(this IReadByteStream stream, int millisecondsTimeout, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. cancellationToken CancellationToken Returns byte Exceptions TimeoutException Read operation timed out before completing ReadByte(IReadByteStream, CancellationToken) Reads the byte. public static byte ReadByte(this IReadByteStream stream, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. cancellationToken CancellationToken The cancellation token. Returns byte ReadByteAsync(IReadByteStream) Reads the byte asynchronous. public static Task<byte> ReadByteAsync(this IReadByteStream stream) Parameters stream IReadByteStream The stream. Returns Task<byte> ReadByteAsync(IReadByteStream, int) eads the byte asynchronously with timeout public static Task<byte> ReadByteAsync(this IReadByteStream stream, int millisecondsTimeout) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. Returns Task<byte> ReadByteAsync(IReadByteStream, int, CancellationToken) Reads the byte asynchronously with timeout public static Task<byte> ReadByteAsync(this IReadByteStream stream, int millisecondsTimeout, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. cancellationToken CancellationToken The cancellation token. Returns Task<byte> Exceptions TimeoutException Read operation timed out before completing TimeoutException Read operation timed out before completing ReadWordAsync(IReadByteStream, CancellationToken) Reads the word. public static Task<ushort> ReadWordAsync(this IReadByteStream stream, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. cancellationToken CancellationToken Returns Task<ushort> SwapNibbles(byte) Swaps the nibbles of a byte public static byte SwapNibbles(this byte value) Parameters value byte The value. Returns byte TryReadByte(IReadByteStream, int, CancellationToken) Tries to read the byte. public static byte? TryReadByte(this IReadByteStream stream, int millisecondsTimeout, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. cancellationToken CancellationToken Returns byte? TryReadByteAsync(IReadByteStream, int) Tries to read the byte asynchronously with timeout public static Task<byte?> TryReadByteAsync(this IReadByteStream stream, int millisecondsTimeout) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. Returns Task<byte?> TryReadByteAsync(IReadByteStream, int, CancellationToken) Tries to read the byte asynchronously with timeout public static Task<byte?> TryReadByteAsync(this IReadByteStream stream, int millisecondsTimeout, CancellationToken cancellationToken) Parameters stream IReadByteStream The stream. millisecondsTimeout int The milliseconds timeout. cancellationToken CancellationToken Returns Task<byte?> WriteByte(IWriteByteStream, int) Writes the byte. public static void WriteByte(this IWriteByteStream stream, int value) Parameters stream IWriteByteStream value int The value. WriteKey(IWriteByteStream, char) Writes the key char public static void WriteKey(this IWriteByteStream stream, char keyChar) Parameters stream IWriteByteStream keyChar char The key character. WriteWord(IWriteByteStream, int) Writes the word. public static void WriteWord(this IWriteByteStream stream, int value) Parameters stream IWriteByteStream value int The value."
  },
  "api/SharpManager.CE140F.html": {
    "href": "api/SharpManager.CE140F.html",
    "title": "Class CE140F | Sharp Manager",
    "keywords": "Class CE140F Namespace SharpManager Assembly SharpManager.Common.dll Class representing the floppy disk drive public class CE140F : NotifyObject, INotifyPropertyChanged Inheritance object NotifyObject CE140F Implements INotifyPropertyChanged Inherited Members NotifyObject.PropertyChanged NotifyObject.GetProperty<T>(string) NotifyObject.GetProperty<T>(T, string) NotifyObject.SetProperty<T>(T, string) NotifyObject.SetProperty<T>(T, Action, string) NotifyObject.SetProperty<T>(ref T, T, string) NotifyObject.OnPropertyChanged(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CE140F(IDebugTarget) Initializes a new instance of the CE140F class. public CE140F(IDebugTarget messageTarget) Parameters messageTarget IDebugTarget The message log. Properties DiskDirectory Gets or sets of the directory representing the disk public string? DiskDirectory { get; set; } Property Value string Methods ProcessCommand(byte[]) Processes the command. public DiskResponse ProcessCommand(byte[] data) Parameters data byte[] The data. Returns DiskResponse The response from the command Reset() Resets this instance. public void Reset()"
  },
  "api/SharpManager.Command.html": {
    "href": "api/SharpManager.Command.html",
    "title": "Enum Command | Sharp Manager",
    "keywords": "Enum Command Namespace SharpManager Assembly SharpManager.Common.dll The packet types public enum Command Fields Data = 5 DeviceSelect = 3 Disk = 8 Init = 1 LoadTape = 6 Ping = 2 Print = 4 SaveTape = 7"
  },
  "api/SharpManager.DataException.html": {
    "href": "api/SharpManager.DataException.html",
    "title": "Class DataException | Sharp Manager",
    "keywords": "Class DataException Namespace SharpManager Assembly SharpManager.Common.dll public class DataException : Exception, ISerializable Inheritance object Exception DataException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DataException(string) Initializes a new instance of the DataException class. public DataException(string message) Parameters message string The message that describes the error. DataException(string, DataException) Initializes a new instance of the DataException class. public DataException(string message, DataException innerException) Parameters message string The error message that explains the reason for the exception. innerException DataException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Methods Expect(byte, byte) Expects the specified received value. public static void Expect(byte received, byte expected) Parameters received byte The received. expected byte The expected. Exceptions DataException Expected {expected:X2} but received {received:X2} Expect(byte, byte, string) Expects the specified received value. public static void Expect(byte received, byte expected, string errorMessage) Parameters received byte The received. expected byte The expected. errorMessage string The error message. Exceptions DataException"
  },
  "api/SharpManager.DiskResponse.html": {
    "href": "api/SharpManager.DiskResponse.html",
    "title": "Class DiskResponse | Sharp Manager",
    "keywords": "Class DiskResponse Namespace SharpManager Assembly SharpManager.Common.dll Response from the disk drive class public class DiskResponse Inheritance object DiskResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiskResponse(byte[], bool) Initializes a new instance of the DiskResponse class. public DiskResponse(byte[] data, bool capture) Parameters data byte[] The data. capture bool if set to true [capture]. Properties Capture Gets the capture flag. This indicates that the arduino should immediately retreive another disk command from the pocket computer public bool Capture { get; } Property Value bool Data Gets the raw disk response data. public byte[] Data { get; } Property Value byte[]"
  },
  "api/SharpManager.ErrorCode.html": {
    "href": "api/SharpManager.ErrorCode.html",
    "title": "Enum ErrorCode | Sharp Manager",
    "keywords": "Enum ErrorCode Namespace SharpManager Assembly SharpManager.Common.dll The error codes public enum ErrorCode Fields Cancelled = 2 End = 255 Ok = 0 Overflow = 4 SyncError = 5 Timeout = 1 Unexpected = 3"
  },
  "api/SharpManager.IByteStream.html": {
    "href": "api/SharpManager.IByteStream.html",
    "title": "Interface IByteStream | Sharp Manager",
    "keywords": "Interface IByteStream Namespace SharpManager Assembly SharpManager.Common.dll Read and write stream interface public interface IByteStream : IReadByteStream, IWriteByteStream Inherited Members IReadByteStream.DataAvailable IReadByteStream.ReadByteAsync(CancellationToken) IWriteByteStream.WriteByte(byte) Extension Methods ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int, string) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, string) ByteStreamExtensions.ReadByte(IReadByteStream) ByteStreamExtensions.ReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadByte(IReadByteStream, CancellationToken) ByteStreamExtensions.ReadByteAsync(IReadByteStream) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadWordAsync(IReadByteStream, CancellationToken) ByteStreamExtensions.TryReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int, CancellationToken) ByteStreamExtensions.WriteByte(IWriteByteStream, int) ByteStreamExtensions.WriteKey(IWriteByteStream, char) ByteStreamExtensions.WriteWord(IWriteByteStream, int) See Also IReadByteStream IWriteByteStream"
  },
  "api/SharpManager.IDebugTarget.html": {
    "href": "api/SharpManager.IDebugTarget.html",
    "title": "Interface IDebugTarget | Sharp Manager",
    "keywords": "Interface IDebugTarget Namespace SharpManager Assembly SharpManager.Common.dll public interface IDebugTarget : IMessageTarget Inherited Members IMessageTarget.Write(string) IMessageTarget.WriteLine(string) IMessageTarget.WriteLine() Methods DebugWrite(string) Write the specified debug message. void DebugWrite(string message) Parameters message string The message. DebugWriteLine() Write a newline to debug void DebugWriteLine() DebugWriteLine(string) Write the specified debug message with newline. void DebugWriteLine(string message) Parameters message string The message. Dump(IEnumerable<byte>) Dump the specified bytes to debug void Dump(IEnumerable<byte> data) Parameters data IEnumerable<byte> The data."
  },
  "api/SharpManager.IMessageTarget.html": {
    "href": "api/SharpManager.IMessageTarget.html",
    "title": "Interface IMessageTarget | Sharp Manager",
    "keywords": "Interface IMessageTarget Namespace SharpManager Assembly SharpManager.Common.dll public interface IMessageTarget Methods Write(string) Write the specified message. void Write(string message) Parameters message string The message. WriteLine() Writes a newline void WriteLine() WriteLine(string) Write the specified message with newline. void WriteLine(string message) Parameters message string The message."
  },
  "api/SharpManager.IReadByteStream.html": {
    "href": "api/SharpManager.IReadByteStream.html",
    "title": "Interface IReadByteStream | Sharp Manager",
    "keywords": "Interface IReadByteStream Namespace SharpManager Assembly SharpManager.Common.dll Read stream interface public interface IReadByteStream Extension Methods ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int, string) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, string) ByteStreamExtensions.ReadByte(IReadByteStream) ByteStreamExtensions.ReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadByte(IReadByteStream, CancellationToken) ByteStreamExtensions.ReadByteAsync(IReadByteStream) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadWordAsync(IReadByteStream, CancellationToken) ByteStreamExtensions.TryReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int, CancellationToken) Properties DataAvailable Gets a value indicating whether data available. bool DataAvailable { get; } Property Value bool Methods ReadByteAsync(CancellationToken) Reads a byte from the stream Task<byte> ReadByteAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task<byte>"
  },
  "api/SharpManager.IWriteByteStream.html": {
    "href": "api/SharpManager.IWriteByteStream.html",
    "title": "Interface IWriteByteStream | Sharp Manager",
    "keywords": "Interface IWriteByteStream Namespace SharpManager Assembly SharpManager.Common.dll Write stream interface public interface IWriteByteStream Extension Methods ByteStreamExtensions.WriteByte(IWriteByteStream, int) ByteStreamExtensions.WriteKey(IWriteByteStream, char) ByteStreamExtensions.WriteWord(IWriteByteStream, int) Methods WriteByte(byte) Writes the byte to the stream void WriteByte(byte value) Parameters value byte"
  },
  "api/SharpManager.NotifyObject.html": {
    "href": "api/SharpManager.NotifyObject.html",
    "title": "Class NotifyObject | Sharp Manager",
    "keywords": "Class NotifyObject Namespace SharpManager Assembly SharpManager.Common.dll public abstract class NotifyObject : INotifyPropertyChanged Inheritance object NotifyObject Implements INotifyPropertyChanged Derived Arduino CE140F Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetProperty<T>(string?) Gets the property. protected T GetProperty<T>(string? name = null) Parameters name string The name. Returns T Type Parameters T Exceptions ArgumentNullException GetProperty<T>(T, string?) Gets the property. protected T GetProperty<T>(T defaultValue, string? name = null) Parameters defaultValue T The default value. name string The name. Returns T Type Parameters T Exceptions ArgumentNullException OnPropertyChanged(string?) Called when the property changed. protected void OnPropertyChanged(string? name = null) Parameters name string The property name. SetProperty<T>(T, Action, string?) Sets the property. protected bool SetProperty<T>(T value, Action action, string? name = null) Parameters value T The value. action Action The action. name string The name. Returns bool Type Parameters T SetProperty<T>(T, string?) Sets the property. protected bool SetProperty<T>(T value, string? name = null) Parameters value T The value. name string The name. Returns bool Type Parameters T Exceptions ArgumentNullException SetProperty<T>(ref T, T, string?) Sets the property value and raises the changed event. protected bool SetProperty<T>(ref T field, T value, string? name = null) Parameters field T The field. value T The value. name string The name of the property. Returns bool True if property was changed Type Parameters T The type of the property Events PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/SharpManager.SerialPortByteStream.html": {
    "href": "api/SharpManager.SerialPortByteStream.html",
    "title": "Class SerialPortByteStream | Sharp Manager",
    "keywords": "Class SerialPortByteStream Namespace SharpManager Assembly SharpManager.Common.dll public class SerialPortByteStream : IByteStream, IReadByteStream, IWriteByteStream, IDisposable Inheritance object SerialPortByteStream Implements IByteStream IReadByteStream IWriteByteStream IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, int, string) ByteStreamExtensions.ExpectByteAsync(IReadByteStream, byte, string) ByteStreamExtensions.ReadByte(IReadByteStream) ByteStreamExtensions.ReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadByte(IReadByteStream, CancellationToken) ByteStreamExtensions.ReadByteAsync(IReadByteStream) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int) ByteStreamExtensions.ReadByteAsync(IReadByteStream, int, CancellationToken) ByteStreamExtensions.ReadWordAsync(IReadByteStream, CancellationToken) ByteStreamExtensions.TryReadByte(IReadByteStream, int, CancellationToken) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int) ByteStreamExtensions.TryReadByteAsync(IReadByteStream, int, CancellationToken) ByteStreamExtensions.WriteByte(IWriteByteStream, int) ByteStreamExtensions.WriteKey(IWriteByteStream, char) ByteStreamExtensions.WriteWord(IWriteByteStream, int) Constructors SerialPortByteStream(SerialPort) Initializes a new instance of the SerialPortByteStream class. public SerialPortByteStream(SerialPort serialPort) Parameters serialPort SerialPort The serial port. Properties DataAvailable Gets a value indicating whether data available. public bool DataAvailable { get; } Property Value bool true if [data available]; otherwise, false. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ReadByteAsync(CancellationToken) Reads the byte asynchronously. public Task<byte> ReadByteAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task<byte> WriteByte(byte) Writes the byte. public void WriteByte(byte value) Parameters value byte The value."
  },
  "api/SharpManager.html": {
    "href": "api/SharpManager.html",
    "title": "Namespace SharpManager | Sharp Manager",
    "keywords": "Namespace SharpManager Classes Arduino ArduinoException ArduinoHardware ByteListExtensions ByteStreamExtensions CE140F Class representing the floppy disk drive DataException DiskResponse Response from the disk drive class NotifyObject SerialPortByteStream Interfaces IByteStream Read and write stream interface IDebugTarget IMessageTarget IReadByteStream Read stream interface IWriteByteStream Write stream interface Enums Command The packet types ErrorCode The error codes"
  },
  "index.html": {
    "href": "index.html",
    "title": "Main | Sharp Manager",
    "keywords": "Sharp Manager is an application for interfacing some vintage Sharp pocket computers with your Windows desktop PC. It works together with an Arduino to connect the Sharp computer to a USB port on your computer. With this hardware and software, Sharp Manager emulates a CE-126P cassette and printer interface and a sharp Sharp CE-140F floppy drive. It has only been tested with a Sharp PC-1401 and a PC-1403 however the disk emulation should work on any device that supports the CE-140F. Requirements To use this software you will need the following: An Sharp Pocket Computer An Arduino (Arduino Nano) Sharp Pocket Tools (Recommended) A PC running Windows 10+ Features CE-126P Printer Emulator: Print from your pocket computer to your desktop CE-126P Cassette Emulator: Load .tap files into PC-1401 and PC-1403. CE-140F Floppy drive Emiulator: Treat a folder on your desktop as a floppy disk. Sharp Manager also supports uploading pre-compiled firmware to a number of different Arduino models. Download and Install You can download the latest release installer from here: Sharp Manager v1.0.1 Download the above file and open it to install Sharp Manager on your computer. Arduino Connection Diagram Arduino Pin Direction Sharp Pin Description GND 3 Electrical Ground D2 ← 4 Busy D3 ← 5 Dout D4 → 6 Xin D5 ← 7 Xout D6 ← 8 Din D7 → 9 ACK D8 ← 10 SEL2 D9 ← 11 SEL1 All the pins that are output from the Sharp Pocket computer must be connected to ground with a pull down resistor. My build uses 480kΩ resistors but most values should work. Getting Help You can get help with this application by using the Issues tab in this project. Building the Project This project consists of two parts, the Arduino Firmware that drives the connections to the Sharp Pocket Computer and the Sharp Manager desktop application that communicates with the Arduino over USB. Building the Arduino Firmware The Arduino firmware is located in the Arduino directory of the project. This can be built with the Arduino IDE and installed directly onto an Arduino. For this project, I've chosen an Arduino Nano but most models of Arduino should work without issue. You can edit the Sharp.h file to change the pin mapping if necessary. Building SharpManager The desktop component is written in C# for .NET 6.0. It can be compiled by the community (free) edition of Visual Studio 2022. Simply open the main solution file in the SharpManager directory of the project and select Build Solution. Acknowledgements Norbert Unterberg for reverse engineering the tape protocol Fabio Fumi for his Sharp CE-140F emulator for ST-Nucleo Everyone in the The Sharp Pocket Computer Faceback group"
  }
}